** Comunicação entre componentes. - Props
obs: mesmo projeto do modulo anterior

- Props (comunicação Pai => filho)


props (abreviação para propriedades), sao utilizados na comunicação de pai para filho no vue. 
Nos componentes nos, definimos a logica e a estrutura, porem, nem todos os dados sao estaticos, e precisam as vezes vir de fora. 

definimos as propriedades de um componente utilizando a palavra chave 'props: ...", e definimos da mesma maneira que os outros metodos chaves do vue (data, mounted, methods, etc); 

Para passar os dados, chamamos as propriedades no elemento html do componente, ex:
  <friend-contact name="lucas" phone-number="1029998273">
  </friend-contact>

  enquanto, dentro do componente, é definido da seguinte maneira. 

  por array (maneira mais simples): 
    props: ["name", "phoneNumber", "emailAddress"];

  para acessar essas propriedades, utlizamos a palavra chave "this"; 

para chamar as propriedades dentro da template html, usamos o nome puro, nao há necessidade de usar o "this".

Nesse tipo de comunicação, existe o conceito de comunicação unilateral, que quer dizer:
  - os dados que sao passados do componente PAi, NAO podem ser alterados no componente filho, portanto, dentro do componente nao deve existir atribuição ou modificação de valor de propriedades diretamente.
  Se caso seja realmente necessario a manipulçao das propriedades dentro do componente, podemos fazer de duas maneiras: 
    1°: fazer uma copia do valor da prop para uma variavel em Data.


* Validação de props: 
- a outra maneira que temos de definir props, é atribuindo um objeto a ela e adicionando mais parametros, por ex: 

  props: {
    name: {
      type: String,
      required: true,
    }
  }

a propriedade name, nesse caso, é definida com o tipo String, e é obrigatoria. Caso a gente utilize o componente sem passar valor pra essa propriedade, teremos um aviso no console dizendo que uma propriedade obrigatoria está sem valor. 

também podemis definir funções de validação e valores default

isFavorite: {
      type: String,
      required: false,
      default: "0",
      validator: function (value) {
        return value === "1" || value === "0";
      },
    }

nesse exemplo, a propriedade não é obrigatoria, entao nao teremos aviso no console caso nao passemos um valor pra ela, pois, alem disso, ela também ja recebe um valor padrao. 


Propriedades dinamicas: 

para utilizar propriedades com valores dinamicos, utilizamso o ":" ou o "v-bind" e atribuimos o dado que sera usado na propriedade dinamica.

